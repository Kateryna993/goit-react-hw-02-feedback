{"version":3,"sources":["components/Statistics/Statistics.module.css","App.module.css","components/Section/Section.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Statistics/Statistics.jsx","components/Notification/Notification.jsx","App.js","index.js"],"names":["module","exports","Section","title","children","className","styles","sectionTitle","FeedbackOptions","options","onLeaveFeedback","map","option","onClick","type","feedbackBtn","Statistics","good","neutral","bad","total","percentage","statsList","statsElemGood","statsElemNeutral","statsElemBad","statsElemTotal","statsElemPercent","Notification","message","App","state","label","setState","prevState","this","goodFeedbackPecentage","countTotalFeedback","Math","round","countGoodFeedbackPercentage","Wrapper","Object","keys","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,UAAY,8BAA8B,cAAgB,kCAAkC,aAAe,iCAAiC,iBAAmB,qCAAqC,eAAiB,mCAAmC,iBAAmB,uC,uCCA7RD,EAAOC,QAAU,CAAC,QAAU,uB,gBCA5BD,EAAOC,QAAU,CAAC,aAAe,gC,gBCAjCD,EAAOC,QAAU,CAAC,YAAc,uC,mKCgBjBC,EAbC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,gCACE,oBAAIC,UAAWC,IAAOC,aAAtB,SAAqCJ,IACpCC,M,iBCkBQI,EAtBS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OACE,8BACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,wBAEEC,QAAS,kBAAMH,EAAgBE,IAC/BE,KAAK,SACLT,UAAWC,IAAOS,YAJpB,SAMGH,GALIA,S,gBC0BAI,EA/BI,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,QAASC,EAA6B,EAA7BA,IAAKC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,WAC/C,OACE,qBAAIhB,UAAWC,IAAOgB,UAAtB,UACE,wCACQ,sBAAMjB,UAAWC,IAAOiB,cAAxB,SAAwCN,OAEhD,2CACW,sBAAMZ,UAAWC,IAAOkB,iBAAxB,SAA2CN,OAEtD,uCACO,sBAAMb,UAAWC,IAAOmB,aAAxB,SAAuCN,OAE9C,yCACS,sBAAMd,UAAWC,IAAOoB,eAAxB,SAAyCN,OAElD,oDACqB,IACnB,uBAAMf,UAAWC,IAAOqB,iBAAxB,UAA2CN,EAA3C,cCVOO,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,6BAAKA,KC+DCC,EA3Df,4MACEC,MAAQ,CACNd,KAAM,EACNC,QAAS,EACTC,IAAK,GAJT,EAoBET,gBAAkB,SAAAsB,GAChB,EAAKC,UAAS,SAAAC,GAAS,sBACpBF,EAAQE,EAAUF,GAAS,OAtBlC,wDAOE,WACE,MAA+BG,KAAKJ,MAEpC,OAFA,EAAQd,KAAR,EAAcC,QAAd,EAAuBC,MAR3B,yCAaE,WACE,IAEMiB,EAAgC,IAFrBD,KAAKJ,MAAdd,KACMkB,KAAKE,qBAEnB,OAAOC,KAAKC,MAAMH,KAjBtB,oBA0BE,WACE,IAAQnB,EAASkB,KAAKJ,MAAdd,KACAC,EAAYiB,KAAKJ,MAAjBb,QACAC,EAAQgB,KAAKJ,MAAbZ,IACFC,EAAQe,KAAKE,qBACbhB,EAAac,KAAKK,8BAExB,OACE,sBAAKnC,UAAWC,IAAOmC,QAAvB,UACE,cAAC,EAAD,CAAStC,MAAM,wBAAf,SACE,cAAC,EAAD,CACEM,QAASiC,OAAOC,KAAKR,KAAKJ,OAC1BrB,gBAAiByB,KAAKzB,oBAG1B,cAAC,EAAD,CAASP,MAAM,aAAf,SACa,IAAViB,EACC,cAAC,EAAD,CAAcS,QAAQ,uBAEtB,cAAC,EAAD,CACEZ,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,WAAYA,aAlD1B,GAAyBuB,aCFzBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e216b3c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsList\":\"Statistics_statsList__1vD1N\",\"statsElemGood\":\"Statistics_statsElemGood__Ueono\",\"statsElemBad\":\"Statistics_statsElemBad__3nDA3\",\"statsElemNeutral\":\"Statistics_statsElemNeutral__2jtmg\",\"statsElemTotal\":\"Statistics_statsElemTotal__29DLr\",\"statsElemPercent\":\"Statistics_statsElemPercent__1WBYa\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Wrapper\":\"App_Wrapper__wLU7u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sectionTitle\":\"Section_sectionTitle__3U2Nv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"feedbackBtn\":\"FeedbackOptions_feedbackBtn__1kcJ4\"};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Section.module.css';\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <h2 className={styles.sectionTitle}>{title}</h2>\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './FeedbackOptions.module.css';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <button\r\n          key={option}\r\n          onClick={() => onLeaveFeedback(option)}\r\n          type=\"button\"\r\n          className={styles.feedbackBtn}\r\n        >\r\n          {option}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Statistics.module.css';\r\n\r\nconst Statistics = ({ good, neutral, bad, total, percentage }) => {\r\n  return (\r\n    <ul className={styles.statsList}>\r\n      <li>\r\n        Good: <span className={styles.statsElemGood}>{good}</span>\r\n      </li>\r\n      <li>\r\n        Neutral: <span className={styles.statsElemNeutral}>{neutral}</span>\r\n      </li>\r\n      <li>\r\n        Bad: <span className={styles.statsElemBad}>{bad}</span>\r\n      </li>\r\n      <li>\r\n        Total: <span className={styles.statsElemTotal}>{total}</span>\r\n      </li>\r\n      <li>\r\n        Positive feedback:{' '}\r\n        <span className={styles.statsElemPercent}>{percentage}%</span>\r\n      </li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nStatistics.propTypes = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  percentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => {\r\n  return <h3>{message}</h3>;\r\n};\r\n\r\nNotification.propTypes = {\r\n  message: PropTypes.string,\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from 'react';\nimport './index.css';\nimport styles from './App.module.css';\nimport Section from './components/Section/Section.jsx';\nimport FeedbackOptions from './components/FeedbackOptions/FeedbackOptions.jsx';\nimport Statistics from './components/Statistics/Statistics.jsx';\nimport Notification from './components/Notification/Notification.jsx';\n\nexport class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback() {\n    const { good, neutral, bad } = this.state;\n    const total = good + neutral + bad;\n    return total;\n  }\n\n  countGoodFeedbackPercentage() {\n    const { good } = this.state;\n    const total = this.countTotalFeedback();\n    const goodFeedbackPecentage = (good * 100) / total;\n    return Math.round(goodFeedbackPecentage);\n  }\n\n  onLeaveFeedback = label => {\n    this.setState(prevState => ({\n      [label]: prevState[label] + 1,\n    }));\n  };\n\n  render() {\n    const { good } = this.state;\n    const { neutral } = this.state;\n    const { bad } = this.state;\n    const total = this.countTotalFeedback();\n    const percentage = this.countGoodFeedbackPercentage();\n\n    return (\n      <div className={styles.Wrapper}>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n        <Section title=\"Statistics\">\n          {total === 0 ? (\n            <Notification message=\"No feedback given!\"></Notification>\n          ) : (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={total}\n              percentage={percentage}\n            />\n          )}\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}